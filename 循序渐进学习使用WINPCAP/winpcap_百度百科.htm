<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0048)http://baike.baidu.com/view/696423.htm?fr=ala0_1 -->
<HTML><HEAD><TITLE>winpcap_百度百科</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<META http-equiv=X-UA-Compatible content=IE=7>
<SCRIPT src="winpcap_百度百科.files/tangram-1.1.0.js" type=text/javascript></SCRIPT>
<LINK href="winpcap_百度百科.files/base.css" type=text/css rel=stylesheet>
<SCRIPT src="winpcap_百度百科.files/base.js" type=text/javascript></SCRIPT>

<SCRIPT type=text/javascript>baikeViewInfo={id:"696423"}</SCRIPT>

<META content="MSHTML 6.00.2900.5945" name=GENERATOR></HEAD>
<BODY>
<DIV id=wrap>
<DIV id=usrbar><A href="http://www.baidu.com/">百度首页</A> <SPAN 
class=usrbar-split>|</SPAN> <A onclick="userlogin();return false" 
href="https://passport.baidu.com/?login&amp;tpl=wk">登录</A> </DIV>
<DIV class=book id=header>
<DIV id=search>
<DIV id=logo><A href="http://baike.baidu.com/"><IMG class=logo-xjd height=80 
alt=到百科首页 src="winpcap_百度百科.files/logo-baikexjd.gif" width=137 border=0></A> 
</DIV>
<DIV id=search-content>
<P class=nv><A 
href="http://news.baidu.com/ns?cl=2&amp;rn=20&amp;tn=news&amp;word=winpcap">新闻</A><A 
href="http://www.baidu.com/s?cl=3&amp;wd=winpcap&amp;t=5">网页</A><A 
href="http://tieba.baidu.com/f?kw=winpcap">贴吧</A><A 
href="http://zhidao.baidu.com/q?ct=17&amp;pn=0&amp;tn=ikaslist&amp;rn=10&amp;word=winpcap">知道</A><A 
href="http://mp3.baidu.com/m?tn=baidump3&amp;ct=134217728&amp;lm=-1&amp;word=winpcap">MP3</A><A 
href="http://image.baidu.com/i?tn=baiduimage&amp;ct=201326592&amp;lm=-1&amp;cl=2&amp;word=winpcap">图片</A><A 
href="http://video.baidu.com/v?ct=301989888&amp;rn=20&amp;pn=0&amp;db=0&amp;s=24&amp;word=winpcap">视频</A><STRONG>百科</STRONG><A 
href="http://wenku.baidu.com/search?word=winpcap&amp;lm=0&amp;od=0">文库</A> </P>
<FORM name=f1 action=/searchword/ method=get target=_self><INPUT id=word 
tabIndex=1 maxLength=400 value=winpcap name=word> <INPUT class=search-btn onclick=document.f1.pic.value=1 tabIndex=2 type=submit value=进入词条><INPUT class=search-btn onclick=document.f1.pic.value=2 tabIndex=3 type=submit value=搜索词条> 
<INPUT id=sw1 type=hidden value=1 name=pic> <INPUT type=hidden value=1 name=sug> 
</FORM></DIV>
<DIV id=help><A href="http://www.baidu.com/search/baike_help.html" 
target=_blank>帮助</A><A onclick="setSug();return false" 
href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#">设置</A> </DIV>
<DIV class=clear></DIV></DIV>
<DIV id=path>
<UL>
  <LI><A href="http://baike.baidu.com/?ref=view" target=_blank>首页</A> </LI>
  <LI><A href="http://baike.baidu.com/ziran/?ref=view" target=_blank>自然</A> 
</LI>
  <LI><A href="http://baike.baidu.com/wenhua/?ref=view" target=_blank>文化</A> 
  </LI>
  <LI><A href="http://baike.baidu.com/dili/?ref=view" target=_blank>地理</A> </LI>
  <LI><A href="http://baike.baidu.com/lishi/?ref=view" target=_blank>历史</A> 
</LI>
  <LI><A href="http://baike.baidu.com/shenghuo/?ref=view" target=_blank>生活</A> 
  </LI>
  <LI><A href="http://baike.baidu.com/shehui/?ref=view" target=_blank>社会</A> 
  </LI>
  <LI><A href="http://baike.baidu.com/yishu/?ref=view" target=_blank>艺术</A> 
</LI>
  <LI><A href="http://baike.baidu.com/renwu/?ref=view" target=_blank>人物</A> 
</LI>
  <LI><A href="http://baike.baidu.com/jingji/?ref=view" target=_blank>经济</A> 
  </LI>
  <LI><A href="http://baike.baidu.com/kexue/?ref=view" target=_blank>科学</A> 
</LI>
  <LI><A href="http://baike.baidu.com/tiyu/?ref=view" target=_blank>体育</A> </LI>
  <LI id=lemma-nav-ppqw><A 
  href="http://www.baidu.com/search/baike/usertask/youmoyouyang2/" 
  target=_blank>有模有样</A> </LI>
  <LI id=lemma-nav-expo><A 
  href="http://www.baidu.com/search/baike/zhuti-expo/expo.html" 
  target=_blank>世博</A> </LI></UL>
<DIV class=clear></DIV></DIV>
<DIV id=lemma-nav-ppqw-hot></DIV>
<DIV id=path-ext></DIV></DIV>
<DIV id=body>
<DIV class=w996 id=content-wrap>
<DIV id=content>
<DIV class=text><SPAN class=t_edit1><A 
onclick='editLemmaPara("/edit/","696423");nslog(location.href,90);return false' 
href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#">编辑词条</A></SPAN> 
<H1>winpcap</H1>
<H4 class=card-title>百科名片</H4>
<DIV class=card-summary id=cardSummary>winpcap(windows packet 
capture)是windows平台下一个免费，公共的网络访问系统。开发winpcap这个项目的目的在于为win32应用程序提供访问网络底层的能力。
<DIV style="CLEAR: both; HEIGHT: 15px"></DIV></DIV>
<SCRIPT type=text/javascript>/*<![CDATA[*/(function(){var $=baidu.G("cardSummary");if($){var _=$.getElementsByTagName("a");for(var B=0,A=_.length;B<A;B++)baidu.on(_[B],"click",function(){nslog(this.href,72)})}})()/*]]>*/</SCRIPT>

<FIELDSET class=text_dir id=catalog>
<P>目录<SPAN>[<A id=dir_alt onclick=lemma.catalog.showCatalog() 
href="javascript:void(0)">隐藏</A>]</SPAN></P>
<DL id=holder1>
  <DD><A href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#1" 
  name=STAT_ONCLICK_UNSUBMIT_CATALOG>【winpcap 驱动各项功能】</A>
  <DD><A href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#2" 
  name=STAT_ONCLICK_UNSUBMIT_CATALOG>【Winpcap的内部结构】</A>
  <DD><A href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#3" 
  name=STAT_ONCLICK_UNSUBMIT_CATALOG>【Winpcap程序实例】</A>
  <DD><A href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#4" 
  name=STAT_ONCLICK_UNSUBMIT_CATALOG>winpcap卸载不干净的解决方法</A></DD></DL>
<DL id=holder2></DL></FIELDSET> <BR><BR>
<DIV class=clear></DIV>
<SCRIPT type=text/javascript>lemma.catalog.start()</SCRIPT>

<DIV id=lemmaContent>　　
<DIV class=bpctrl></DIV>
<H2 class=first>
<DIV class=text_edit>[<A 
onclick="editLemmaPara('/edit/', 696423, 1); return false;" 
href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#">编辑本段</A>]</DIV><A 
name=1></A>【winpcap 驱动各项功能】</H2>　　1&gt; 捕获原始数据包，包括在共享网络上各主机发送/接收的以及相互之间交换的数据
<DIV class=text_pic style="FLOAT: right; VISIBILITY: hidden"><A 
href="http://baike.baidu.com/image/814b07d8d9c7822d32fa1c36" target=_blank><IMG 
class=editorImg title=winpcap结构 
src="winpcap_百度百科.files/814b07d8d9c7822d32fa1c36.jpg"></A>
<H3>winpcap结构</H3></DIV>包； 
<DIV class=spctrl></DIV>　　2&gt; 在数据包发往应用程序之前，按照自定义的规则将某些特殊的数据包过滤掉； 
<DIV class=spctrl></DIV>　　3&gt; 在网络上发送原始的数据包； 
<DIV class=spctrl></DIV>　　4&gt; 收集网络通信过程中的统计信息。 
<DIV 
class=spctrl></DIV>　　winpcap的主要功能在于独立于主机协议（如TCP-IP)而发送和接收原始数据包。也就是说，winpcap不能阻塞，过滤或控制其他应用程序数据包的发收，它仅仅只是监听共享网络上传送的数据包。因此，它不能用于<A 
href="http://baike.baidu.com/view/20897.htm" target=_blank>QoS</A>调度程序或<A 
href="http://baike.baidu.com/view/973385.htm" 
target=_blank>个人防火墙</A>。目前，winpcap开发的主要对象是<A 
href="http://baike.baidu.com/view/41346.htm" target=_blank>windows 
NT</A>/2000/XP，这主要是因为在使用winpcap的用户中只有一小部分是仅使用<A 
href="http://baike.baidu.com/view/41207.htm" target=_blank>windows 
95</A>/98/Me，并且M$也已经放弃了对<A href="http://baike.baidu.com/view/374654.htm" 
target=_blank>win9x</A>的开发。因此本文相关的程序T-ARP也是面向NT/2000/XP用户的。其实winpcap中的面向9x系统的概念和NT系统的非常相似，只是在某些实现上有点差异，比如说9x只支持<A 
href="http://baike.baidu.com/view/1273097.htm" 
target=_blank>ANSI编码</A>，而NT系统则提倡使用<A 
href="http://baike.baidu.com/view/40801.htm" target=_blank>Unicode</A>编码。有个软件叫<A 
href="http://baike.baidu.com/view/724.htm" target=_blank>sniffer</A> 
pro.可以作网管软件用，有很多功能，可监视网络运行情况，每台网内机器的数据流量,实时反映每台机器所访问IP以及它们之间的数据流通情况，可以抓包，可对过滤器进行设置,以便只抓取想要的包，比如<A 
href="http://baike.baidu.com/view/5404.htm" target=_blank>POP3</A>包,<A 
href="http://baike.baidu.com/view/5450.htm" 
target=_blank>smtp</A>包，ftp包等，并可从中找到邮箱用户名和密码,还有<A 
href="http://baike.baidu.com/view/369.htm" 
target=_blank>ftp</A>用户名和密码。它还可以在使用交换机的网络上监听，不过要在交换机上装它的一个软件。还有一个简单的监听软件叫Passwordsniffer，可截获邮箱用户名和密码，还有ftp用户名和密码，它只能用在HUB网络上。著名软件<A 
href="http://baike.baidu.com/view/76504.htm" target=_blank>tcpdump</A>及<A 
href="http://baike.baidu.com/view/34066.htm" target=_blank>ids</A> snort都是基于<A 
href="http://baike.baidu.com/view/1319961.htm" target=_blank>libpcap</A>编写的，此外<A 
href="http://baike.baidu.com/view/77455.htm" 
target=_blank>Nmap</A>扫描器也是基于libpcap来捕获目标主机返回的数据包的。 
<DIV 
class=spctrl></DIV>　　winpcap提供给用户两个不同级别的编程接口：一个基于libpcap的wpcap.dll，另一个是较底层的packet.dll。对于一般的要与unix平台上libpcap兼容的开发来说，使用wpcap.dll是当然的选择。
<DIV class=bpctrl></DIV>
<H2 class="">
<DIV class=text_edit>[<A 
onclick="editLemmaPara('/edit/', 696423, 2); return false;" 
href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#">编辑本段</A>]</DIV><A 
name=2></A>【Winpcap的内部结构】</H2>　　
<DIV class=text_pic style="FLOAT: right; VISIBILITY: hidden"><A 
href="http://baike.baidu.com/image/8a95ad1c4ca8929386d6b667" target=_blank><IMG 
class=editorImg title=Winpcap的各个组成部分 
src="winpcap_百度百科.files/8a95ad1c4ca8929386d6b667.jpg"></A>
<H3>Winpcap的各个组成部分</H3></DIV>Winpcap是针对Win32平台上的抓包和网络分析的一个架构。它包括一个核心态的包过滤器，一个底层的动态链接库（packet.dll）和一个高层的不依赖于系统的库（wpcap.dll）。 

<DIV 
class=spctrl></DIV>　　为什么使用“architecture”而不是“library”呢？因为抓包是一个要求与网络适配器（网卡）和操作系统交互的底层机制，而且与网络的实施也有密切关系，所以仅用“library”不能充分表达Winpcap的作用。 

<DIV class=spctrl></DIV>　　下图表明了Winpcap的各个组成部分： 
<DIV class=spctrl></DIV>　　首先，抓包系统必须绕过操作系统的协议栈来访问在网络上传输的原始数据包（raw 
packet），这就要求一部分运行在操作系统核心内部，直接与网络接口驱动交互。这个部分是系统依赖（system 
dependent）的，在Winpcap的解决方案里它被认为是一个设备驱动，称作NPF（Netgroup Packet 
Filter）。Winpcap开发小组针对Windows95，Windows98，WindowsME，Windows NT 
4，Windows2000和WindowsXP提供了不同版本的驱动。这些驱动不仅提供了基本的特性（例如抓包和injection），还有更高级的特性（例如可编程的过滤器系统和监视引擎）。前者可以被用来约束一个抓包会话只针对网络通信中的一个子集（例如，仅仅捕获特殊主机产生的ftp通信的数据包），后者提供了一个强大而简单的统计网络通信量的机制（例如，获得网络负载或两个主机间的数据交换量）。 

<DIV 
class=spctrl></DIV>　　其次，抓包系统必须有用户级的程序接口，通过这些接口，用户程序可以利用内核驱动提供的高级特性。Winpcap提供了两个不同的库：packet.dll和wpcap.dll。前者提供了一个底层API，伴随着一个独立于Microsoft操作系统的编程接口，这些API可以直接用来访问驱动的函数；后者导出了一组更强大的与libpcap一致的高层抓包函数库（capture 
primitives）。这些函数使得数据包的捕获以一种与网络硬件和操作系统无关的方式进行。 
<DIV class=spctrl></DIV>　　<B>〖NPF驱动〗</B> 
<DIV class=spctrl></DIV>　　网络数据包过滤器（Netgroup Packet 
Filter，NPF）是Winpcap的核心部分，它是Winpcap完成困难工作的组件。它处理网络上传输的数据包，并且对用户级提供可捕获（capture）、发送（injection）和分析性能（analysis 
capabilities）。 
<DIV class=spctrl></DIV>　　<B>〖NPF和NDIS〗</B> 
<DIV class=spctrl></DIV>　　<A href="http://baike.baidu.com/view/1033533.htm" 
target=_blank>NDIS</A>（Network Driver Interface 
Specification）是一个定义网络适配器（或者说成是管理网络适配器的驱动程序）与协议驱动（例如TCP/IP的实现）之间通信的规范。NDIS最主要的目的是作为一个允许协议驱动发送和接收网络（<A 
href="http://baike.baidu.com/view/14702.htm" target=_blank>LAN</A>或<A 
href="http://baike.baidu.com/view/14784.htm" 
target=_blank>WAN</A>）上的数据包而不必关心特定的适配器或特定的<A 
href="http://baike.baidu.com/view/270236.htm" target=_blank>Win32</A>操作系统的封装。 
<DIV class=spctrl></DIV>　　NDIS支持三种类型的网络驱动： 
<DIV class=spctrl></DIV>　　<B>（1） </B><A 
href="http://baike.baidu.com/view/547393.htm" 
target=_blank><B>网络接口卡</B></A><B>或</B><A 
href="http://baike.baidu.com/view/22255.htm" 
target=_blank><B>NIC</B></A><B>驱动</B>（Network interface card or NIC 
drivers）。NIC驱动直接管理着网络接口卡（NIC）。NIC驱动接下边与硬件连接，从上边表现为一个接口，该接口允许高层发送数据包到网络上，处理中断，重置NIC，停止NIC，查询和设置驱动的运行特征。NIC驱动可以是小端口（miniport）或完全的NIC驱动（full 
NIC driver）。 
<DIV 
class=spctrl></DIV>　　Miniport驱动仅仅实现了管理NIC的必要操作，包括在NIC上发送和接收数据。对于所有最底层的NIC驱动的操作由NDIS提供，例如<A 
href="http://baike.baidu.com/view/54180.htm" 
target=_blank>同步</A>（synchronization）。小端口（miniport）不直接调用操作系统函数，它们对于操作系统的接口是NDIS。 

<DIV class=spctrl></DIV>　　小端口仅仅是向上传递数据包给NDIS并且NDIS确保这些数据包被传递给正确的协议。 
<DIV class=spctrl></DIV>　　完全NIC驱动（Full NIC 
driver）完成硬件细节的操作和所有由NDIS完成的同步和查询操作。例如，完全NIC驱动维持接收到的数据的绑定信息。 
<DIV class=spctrl></DIV>　　<B>（2） 中间层驱动</B>（Intermediate 
drivers）中间层驱动位于高层驱动（例如协议驱动）和小端口之间。对于高层驱动，中间层驱动看起来像是小端口；对于小端口，中间层驱动看起来像协议驱动。一个中间层协议驱动可以位于另一个中间层驱动之上，尽管这种分层可能对系统性能带来负面影响。开发中间层驱动的一个关键原因是在现存的遗留协议驱动（legacy 
protocol 
driver）和小端口之间形成媒体的转化。例如，中间层驱动可以将LAN协议转换成ATM协议。中间层驱动不能与用户模式的应用程序通信，但可以与其他的NDIS驱动通信。 

<DIV class=spctrl></DIV>　　<B>（3） 传输驱动或协议驱动</B>（Transport drivers or protocol 
drivers）协议驱动实现了网络协议栈，例如IPX/SPX或TCP/IP，在一个或多个网络接口卡上提供它的服务。在协议驱动的上面，它为应用层客户程序服务；在它的下面，它与一个或多个NIC驱动或中间层NDIS驱动连接。 

<DIV class=spctrl></DIV>　　
<DIV class=text_pic style="FLOAT: left; VISIBILITY: hidden"><A 
href="http://baike.baidu.com/image/0b3a1c08a04c39c963d98676" target=_blank><IMG 
class=editorImg title=NPF在NDIS栈中的位置 
src="winpcap_百度百科.files/0b3a1c08a04c39c963d98676.jpg"></A>
<H3>NPF在NDIS栈中的位置</H3></DIV>NPF是一个协议驱动。从性能方面来看，这不是最好的选择，但是它合理地独立于MAC层并且有权使用原始通信（raw 
traffic）。 
<DIV class=spctrl></DIV>　　下图表现了NPF在NDIS栈中的位置： 
<DIV class=spctrl></DIV>　　
<DIV class=text_pic style="FLOAT: right; VISIBILITY: hidden"><A 
href="http://baike.baidu.com/image/9113862285ca3febd6cae27a" target=_blank><IMG 
class=editorImg title=伴随着NPF驱动细节的Winpcap的结构 
src="winpcap_百度百科.files/9113862285ca3febd6cae27a.jpg"></A>
<H3>伴随着NPF驱动细节的Winpcap的结构</H3></DIV><B>〖NPF结构基础〗</B> 
<DIV class=spctrl></DIV>　　下图表现了伴随着NPF驱动细节的Winpcap的结构。 
<DIV class=spctrl></DIV>　　<B>〖抓包〗</B> 
<DIV class=spctrl></DIV>　　<A href="http://baike.baidu.com/view/558624.htm" 
target=_blank>抓包</A>是NPF最重要的操作。在抓包的时候，驱动使用一个网络接口监视着数据包，并将这些数据包完整无缺地投递给用户级应用程序。 
<DIV class=spctrl></DIV>　　抓包过程依赖于两个主要组件： 
<DIV class=spctrl></DIV>　　一个数据包<A href="http://baike.baidu.com/view/543345.htm" 
target=_blank>过滤器</A>，它决定着是否接收进来的数据包并把数据包<A 
href="http://baike.baidu.com/view/33028.htm" 
target=_blank>拷贝</A>给监听程序。数据包过滤器是一个有布尔输出的函数。如果<A 
href="http://baike.baidu.com/view/276988.htm" 
target=_blank>函数值</A>是true，抓包驱动拷贝数据包给应用程序；如果是false，数据包将被丢弃。NPF数据包过滤器更复杂一些，因为它不仅决定数据包是否应该被保存，而且还得决定要保存的字节数。被NPF驱动采用的过滤系统来源于BSD 
Packet 
Filter（BPF），一个虚拟处理器可以执行伪汇编书写的用户级过滤程序。应用程序采用用户定义的过滤器并使用wpcap.dll将它们编译进BPF程序。然后，应用程序使用BIOCSETF 
IOCTL写入核心态的过滤器。这样，对于每一个到来的数据包该程序都将被执行，而满足条件的数据包将被接收。与传统解决方案不同，NPF不解释（interpret）过滤器，而是执行（execute）它。由于性能的原因，在使用过滤器前，NPF提供一个JIT编译器将它转化成本地的80x86函数。当一个数据包被捕获，NPF调用这个本地函数而不是调用过滤器解释器，这使得处理过程相当快。 

<DIV class=spctrl></DIV>　　一个循环缓冲区，用来保存数据包并且避免丢失。一个保存在<A 
href="http://baike.baidu.com/view/266782.htm" 
target=_blank>缓冲区</A>中的数据包有一个头，它包含了一些主要的信息，例如<A 
href="http://baike.baidu.com/view/354827.htm" target=_blank>时间戳</A>和<A 
href="http://baike.baidu.com/view/25880.htm" 
target=_blank>数据包</A>的大小，但它不是协议头。此外，以队列插入的方式来保存数据包可以提高数据的存储效率。可以以组的方式将数据包从NPF缓冲区拷贝到应用程序。这样就提高了性能，因为它降低了读的次数。如果一个数据包到来的时候缓冲区已经满了，那么该数据包将被丢弃，因此就发生了<A 
href="http://baike.baidu.com/view/55894.htm" target=_blank>丢包</A>。
<DIV class=bpctrl></DIV>
<H2 class="">
<DIV class=text_edit>[<A 
onclick="editLemmaPara('/edit/', 696423, 3); return false;" 
href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#">编辑本段</A>]</DIV><A 
name=3></A>【Winpcap程序实例】</H2>　　获得<A href="http://baike.baidu.com/view/4230.htm" 
target=_blank>网卡</A>接口。在普通的<A href="http://baike.baidu.com/view/13870.htm" 
target=_blank>SOCKET</A>编程中，对<A href="http://baike.baidu.com/view/708933.htm" 
target=_blank>双网卡</A>编程是不行的。当主机为双网卡时，本程序可分别获得两张网卡各自的描述结构及地址，然后可以对它们分别进行操作。返回的alldevs队列首部为逻辑网卡，一般不对它进行什么操作。 

<DIV class=spctrl></DIV>　　<B>（一）获得</B><B>网卡</B><B>接口</B> 
<DIV class=spctrl></DIV>　　＃i nclude "pcap.h" 
<DIV class=spctrl></DIV>　　void main() 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　pcap_if_t *alldevs; 
<DIV class=spctrl></DIV>　　/*struct pcap_if_t{ 
<DIV class=spctrl></DIV>　　pcap_if_t *next; 
<DIV class=spctrl></DIV>　　char *name; 
<DIV class=spctrl></DIV>　　char *description; 
<DIV class=spctrl></DIV>　　pcap_addr *addresses; 
<DIV class=spctrl></DIV>　　U_int falgs; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　*/ 
<DIV class=spctrl></DIV>　　pcap_if_t *d; 
<DIV class=spctrl></DIV>　　int i=0; 
<DIV class=spctrl></DIV>　　char errbuf[PCAP_ERRBUF_SIZE]; 
<DIV class=spctrl></DIV>　　/* Retrieve the device list */ 
<DIV class=spctrl></DIV>　　if (pcap_findalldevs(&amp;alldevs, errbuf) == 
-1)//返回网卡列表，alldevs指向表头 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　fprintf(stderr,"Error in pcap_findalldevs: %s\n", 
errbuf); 
<DIV class=spctrl></DIV>　　exit(1); 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　/* Print the list */ 
<DIV class=spctrl></DIV>　　for(d=alldevs;d;d=d-&gt;next) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　printf("%d. %s", ++i, d-&gt;name); 
<DIV class=spctrl></DIV>　　if (d-&gt;description) 
<DIV class=spctrl></DIV>　　printf(" (%s)\n", d-&gt;description); 
<DIV class=spctrl></DIV>　　else printf(" (No description available)\n"); 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　if(i==0) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　printf("\nNo interfaces found! Make sure WinPcap is 
installed.\n"); 
<DIV class=spctrl></DIV>　　return; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　/* We don't need any more the device list. Free it */ 
<DIV class=spctrl></DIV>　　pcap_freealldevs(alldevs); 
<DIV class=spctrl></DIV>　　} 
<DIV 
class=spctrl></DIV>　　-------------------------------------------------------------------------------- 

<DIV class=spctrl></DIV>　　<B>（二）抓包</B> 
<DIV class=spctrl></DIV>　　本程序俘获<A href="http://baike.baidu.com/view/788.htm" 
target=_blank>局域网</A>内<A href="http://baike.baidu.com/view/30509.htm" 
target=_blank>UDP</A>报文。 
<DIV class=spctrl></DIV>　　＃i nclude "pcap.h" 
<DIV class=spctrl></DIV>　　/* 4 bytes IP address */ 
<DIV class=spctrl></DIV>　　typedef struct ip_address{ 
<DIV class=spctrl></DIV>　　u_char byte1; 
<DIV class=spctrl></DIV>　　u_char byte2; 
<DIV class=spctrl></DIV>　　u_char byte3; 
<DIV class=spctrl></DIV>　　u_char byte4; 
<DIV class=spctrl></DIV>　　}ip_address; 
<DIV class=spctrl></DIV>　　/* IPv4 header */ 
<DIV class=spctrl></DIV>　　typedef struct ip_header{ 
<DIV class=spctrl></DIV>　　u_char ver_ihl; // Version (4 bits) + Internet header 
length (4 bits) 
<DIV class=spctrl></DIV>　　u_char tos; // Type of service 
<DIV class=spctrl></DIV>　　u_short tlen; // Total length 
<DIV class=spctrl></DIV>　　u_short identification; // Identification 
<DIV class=spctrl></DIV>　　u_short flags_fo; // Flags (3 bits) + Fragment offset 
(13 bits) 
<DIV class=spctrl></DIV>　　u_char ttl; // Time to live 
<DIV class=spctrl></DIV>　　u_char proto; // Protocol 
<DIV class=spctrl></DIV>　　u_short crc; // Header checksum 
<DIV class=spctrl></DIV>　　ip_address saddr; // Source address 
<DIV class=spctrl></DIV>　　ip_address daddr; // Destination address 
<DIV class=spctrl></DIV>　　u_int op_pad; // Option + Padding 
<DIV class=spctrl></DIV>　　}ip_header; 
<DIV class=spctrl></DIV>　　/* UDP header*/ 
<DIV class=spctrl></DIV>　　typedef struct udp_header{ 
<DIV class=spctrl></DIV>　　u_short sport; // Source port 
<DIV class=spctrl></DIV>　　u_short dport; // Destination port 
<DIV class=spctrl></DIV>　　u_short len; // Datagram length 
<DIV class=spctrl></DIV>　　u_short crc; // Checksum 
<DIV class=spctrl></DIV>　　}udp_header; 
<DIV class=spctrl></DIV>　　/* prototype of the packet handler */ 
<DIV class=spctrl></DIV>　　void packet_handler(u_char *param, const struct 
pcap_pkthdr *header, const u_char *pkt_data); 
<DIV class=spctrl></DIV>　　main() 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　pcap_if_t *alldevs; 
<DIV class=spctrl></DIV>　　pcap_if_t *d; 
<DIV class=spctrl></DIV>　　int inum; 
<DIV class=spctrl></DIV>　　int i=0; 
<DIV class=spctrl></DIV>　　pcap_t *adhandle; 
<DIV class=spctrl></DIV>　　char errbuf[PCAP_ERRBUF_SIZE]; 
<DIV class=spctrl></DIV>　　u_int netmask; 
<DIV class=spctrl></DIV>　　char packet_filter[] = "ip and udp"; 
<DIV class=spctrl></DIV>　　struct bpf_program fcode; 
<DIV class=spctrl></DIV>　　/* Retrieve the device list */ 
<DIV class=spctrl></DIV>　　if (pcap_findalldevs(&amp;alldevs, errbuf) == -1) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　fprintf(stderr,"Error in pcap_findalldevs: %s\n", 
errbuf); 
<DIV class=spctrl></DIV>　　exit(1); 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　/* Print the list */ 
<DIV class=spctrl></DIV>　　for(d=alldevs; d; d=d-&gt;next) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　printf("%d. %s", ++i, d-&gt;name); 
<DIV class=spctrl></DIV>　　if (d-&gt;description) 
<DIV class=spctrl></DIV>　　printf(" (%s)\n", d-&gt;description); 
<DIV class=spctrl></DIV>　　else 
<DIV class=spctrl></DIV>　　printf(" (No description available)\n"); 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　if(i==0) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　printf("\nNo interfaces found! Make sure WinPcap is 
installed.\n"); 
<DIV class=spctrl></DIV>　　return -1; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　printf("Enter the interface number (1-%d):",i); 
<DIV class=spctrl></DIV>　　scanf("%d", &amp;inum); 
<DIV class=spctrl></DIV>　　if(inum &lt; 1 || inum &gt; i) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　printf("\nInterface number out of range.\n"); 
<DIV class=spctrl></DIV>　　/* Free the device list */ 
<DIV class=spctrl></DIV>　　pcap_freealldevs(alldevs); 
<DIV class=spctrl></DIV>　　return -1; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　/* Jump to the selected adapter */ 
<DIV class=spctrl></DIV>　　for(d=alldevs, i=0; i&lt; inum-1 ;d=d-&gt;next, i++); 
<DIV class=spctrl></DIV>　　/* Open the adapter */ 
<DIV class=spctrl></DIV>　　if ( (adhandle= pcap_open_live(d-&gt;name, // name of 
the device 
<DIV class=spctrl></DIV>　　65536, // portion of the packet to capture. 
<DIV class=spctrl></DIV>　　// 65536 grants that the whole packet will be captured 
on all the MACs. 
<DIV class=spctrl></DIV>　　1, // promiscuous mode 
<DIV class=spctrl></DIV>　　1000, // read timeout 
<DIV class=spctrl></DIV>　　errbuf // error buffer 
<DIV class=spctrl></DIV>　　) ) == NULL) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　fprintf(stderr,"\nUnable to open the adapter. %s is 
not supported by WinPcap\n"); 
<DIV class=spctrl></DIV>　　/* Free the device list */ 
<DIV class=spctrl></DIV>　　pcap_freealldevs(alldevs); 
<DIV class=spctrl></DIV>　　return -1; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　/* Check the link layer. We support only Ethernet for 
simplicity. */ 
<DIV class=spctrl></DIV>　　if(pcap_datalink(adhandle) != DLT_EN10MB) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　fprintf(stderr,"\nThis program works only on Ethernet 
networks.\n"); 
<DIV class=spctrl></DIV>　　/* Free the device list */ 
<DIV class=spctrl></DIV>　　pcap_freealldevs(alldevs); 
<DIV class=spctrl></DIV>　　return -1; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　if(d-&gt;addresses != NULL) 
<DIV class=spctrl></DIV>　　/* Retrieve the mask of the first address of the 
interface */ 
<DIV class=spctrl></DIV>　　netmask=((struct sockaddr_in 
*)(d-&gt;addresses-&gt;netmask))-&gt;sin_addr.S_un.S_addr; 
<DIV class=spctrl></DIV>　　else 
<DIV class=spctrl></DIV>　　/* If the interface is without addresses we suppose to 
be in a C class network */ 
<DIV class=spctrl></DIV>　　netmask=0xffffff; 
<DIV class=spctrl></DIV>　　//compile the filter 
<DIV class=spctrl></DIV>　　if(pcap_compile(adhandle, &amp;fcode, packet_filter, 
1, netmask) &lt;0 ){ 
<DIV class=spctrl></DIV>　　fprintf(stderr,"\nUnable to compile the packet filter. 
Check the syntax.\n"); 
<DIV class=spctrl></DIV>　　/* Free the device list */ 
<DIV class=spctrl></DIV>　　pcap_freealldevs(alldevs); 
<DIV class=spctrl></DIV>　　return -1; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　//set the filter 
<DIV class=spctrl></DIV>　　if(pcap_setfilter(adhandle, &amp;fcode)&lt;0){ 
<DIV class=spctrl></DIV>　　fprintf(stderr,"\nError setting the filter.\n"); 
<DIV class=spctrl></DIV>　　/* Free the device list */ 
<DIV class=spctrl></DIV>　　pcap_freealldevs(alldevs); 
<DIV class=spctrl></DIV>　　return -1; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　printf("\nlistening on %s...\n", d-&gt;description); 
<DIV class=spctrl></DIV>　　/* At this point, we don't need any more the device 
list. Free it */ 
<DIV class=spctrl></DIV>　　pcap_freealldevs(alldevs); 
<DIV class=spctrl></DIV>　　/* start the capture */ 
<DIV class=spctrl></DIV>　　pcap_loop(adhandle, 0, packet_handler, NULL); 
<DIV class=spctrl></DIV>　　return 0; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　/* Callback function invoked by libpcap for every 
incoming packet */ 
<DIV class=spctrl></DIV>　　void packet_handler(u_char *param, const struct 
pcap_pkthdr *header, const u_char *pkt_data) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　struct tm *ltime; 
<DIV class=spctrl></DIV>　　char timestr[16]; 
<DIV class=spctrl></DIV>　　ip_header *ih; 
<DIV class=spctrl></DIV>　　udp_header *uh; 
<DIV class=spctrl></DIV>　　u_int ip_len; 
<DIV class=spctrl></DIV>　　/* convert the timestamp to readable format */ 
<DIV class=spctrl></DIV>　　ltime=localtime(&amp;header-&gt;ts.tv_sec); 
<DIV class=spctrl></DIV>　　strftime( timestr, sizeof timestr, "%H:%M:%S", ltime); 

<DIV class=spctrl></DIV>　　/* print timestamp and length of the packet */ 
<DIV class=spctrl></DIV>　　/* retireve the position of the ip header */ 
<DIV class=spctrl></DIV>　　ih = (ip_header *) (pkt_data + 
<DIV class=spctrl></DIV>　　14); //length of ethernet header 
<DIV class=spctrl></DIV>　　/* retireve the position of the udp header */ 
<DIV class=spctrl></DIV>　　ip_len = (ih-&gt;ver_ihl &amp; 0xf) * 4; 
<DIV class=spctrl></DIV>　　uh = (udp_header *) ((u_char*)ih + ip_len); 
<DIV class=spctrl></DIV>　　/* convert from network byte order to host byte order 
*/ 
<DIV class=spctrl></DIV>　　printf("%s.%.6d len:%d ", timestr, 
header-&gt;ts.tv_usec, header-&gt;len); 
<DIV class=spctrl></DIV>　　/* print ip addresses */ 
<DIV class=spctrl></DIV>　　printf("%d.%d.%d.%d -&gt; %d.%d.%d.%d\n", 
<DIV class=spctrl></DIV>　　ih-&gt;saddr.byte1, 
<DIV class=spctrl></DIV>　　ih-&gt;saddr.byte2, 
<DIV class=spctrl></DIV>　　ih-&gt;saddr.byte3, 
<DIV class=spctrl></DIV>　　ih-&gt;saddr.byte4, 
<DIV class=spctrl></DIV>　　ih-&gt;daddr.byte1, 
<DIV class=spctrl></DIV>　　ih-&gt;daddr.byte2, 
<DIV class=spctrl></DIV>　　ih-&gt;daddr.byte3, 
<DIV class=spctrl></DIV>　　ih-&gt;daddr.byte4 
<DIV class=spctrl></DIV>　　); 
<DIV class=spctrl></DIV>　　} 
<DIV 
class=spctrl></DIV>　　-------------------------------------------------------------------------------- 

<DIV class=spctrl></DIV>　　<B>（三）发包</B> 
<DIV class=spctrl></DIV>　　要在命令行下运行，给与参数：网卡描述符。或者添加代码findalldevs（），那样应很方便。 
<DIV class=spctrl></DIV>　　＃i nclude &lt;stdlib.h&gt; 
<DIV class=spctrl></DIV>　　＃i nclude &lt;stdio.h&gt; 
<DIV class=spctrl></DIV>　　＃i nclude 
<DIV class=spctrl></DIV>　　void usage(); 
<DIV class=spctrl></DIV>　　void main(int argc, char **argv) { 
<DIV class=spctrl></DIV>　　pcap_t *fp; 
<DIV class=spctrl></DIV>　　char error[PCAP_ERRBUF_SIZE]; 
<DIV class=spctrl></DIV>　　u_char packet[100]; 
<DIV class=spctrl></DIV>　　int i; 
<DIV class=spctrl></DIV>　　/* Check the validity of the command line */ 
<DIV class=spctrl></DIV>　　if (argc != 2) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　printf("usage: %s inerface", argv[0]); 
<DIV class=spctrl></DIV>　　return; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　/* Open the output adapter */ 
<DIV class=spctrl></DIV>　　if((fp = pcap_open_live(argv[1], 100, 1, 1000, error) 
) == NULL) 
<DIV class=spctrl></DIV>　　{ 
<DIV class=spctrl></DIV>　　fprintf(stderr,"\nError opening adapter: %s\n", 
error); 
<DIV class=spctrl></DIV>　　return; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　/* Supposing to be on ethernet, set mac destination to 
1:1:1:1:1:1 */ 
<DIV class=spctrl></DIV>　　packet[0]=1; 
<DIV class=spctrl></DIV>　　packet[1]=1; 
<DIV class=spctrl></DIV>　　packet[2]=1; 
<DIV class=spctrl></DIV>　　packet[3]=1; 
<DIV class=spctrl></DIV>　　packet[4]=1; 
<DIV class=spctrl></DIV>　　packet[5]=1; 
<DIV class=spctrl></DIV>　　/* set mac source to 2:2:2:2:2:2 */ 
<DIV class=spctrl></DIV>　　packet[6]=2; 
<DIV class=spctrl></DIV>　　packet[7]=2; 
<DIV class=spctrl></DIV>　　packet[8]=2; 
<DIV class=spctrl></DIV>　　packet[9]=2; 
<DIV class=spctrl></DIV>　　packet[10]=2; 
<DIV class=spctrl></DIV>　　packet[11]=2; 
<DIV class=spctrl></DIV>　　/* Fill the rest of the packet */ 
<DIV class=spctrl></DIV>　　for(i=12;i&lt;100;i++){ 
<DIV class=spctrl></DIV>　　packet<I>=i%256; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　/* Send down the packet */ 
<DIV class=spctrl></DIV>　　pcap_sendpacket(fp, 
<DIV class=spctrl></DIV>　　packet, 
<DIV class=spctrl></DIV>　　100); 
<DIV class=spctrl></DIV>　　return; 
<DIV class=spctrl></DIV>　　} 
<DIV class=spctrl></DIV>　　</I>
<DIV class=bpctrl></DIV>
<H2 class="">
<DIV class=text_edit>[<A 
onclick="editLemmaPara('/edit/', 696423, 4); return false;" 
href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#">编辑本段</A>]</DIV><A 
name=4></A>winpcap卸载不干净的解决方法</H2>　　<SUP onclick=gotoRef(this)>[1]</SUP><A 
name=ref_[1]></A><SUP onclick=gotoRef(this)>[2]</SUP><A 
name=ref_[2]></A>winpcap卸载不干净的的时候，在windows下删除一些文件即可，删除下面的文件即可： 
<DIV class=spctrl></DIV>　　c:\windows\system32\Packet.dll 
<DIV class=spctrl></DIV>　　c:\windows\system32\drivers/npf.sys 
<DIV class=spctrl></DIV>　　c:\windows\system32\WanPacket.dll 
<DIV class=spctrl></DIV>　　c:\windows\system32\wpcap.dll 
<DIV class=spctrl></DIV>　　c:\windows\system32\pthreadVC.dll
<DIV class=bpctrl style="CLEAR: both"></DIV><BR><SPAN class=arr><A title=返回首页 
href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#" 
name=STAT_ONCLICK_UNSUBMIT_CATALOG_RETURN></A></SPAN></DIV></DIV>
<DIV class=ref id=lemmaExtend>
<DIV class=lemma-ext-area>
<DL id=viewRefer>
  <DT>参考资料 
  <DD class=new-ref>
  <UL>
    <LI><SPAN class=refNum>1.</SPAN> <A class=refTop id=refIndex_1 title=向上跳转 
    href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#ref_[1]" 
    name=refIndex_1></A>
    <P>WinpCap无法完全卸载问题的解决</P>
    <P class=refUrl><A href="http://technic.xkq.com/20090611/96929.html" 
    target=_blank>http://technic.xkq.com/20090611/96929.html<IMG 
    src="winpcap_百度百科.files/ico_link.gif" align=absMiddle></A></P></LI>
    <LI><SPAN class=refNum>2.</SPAN> <A class=refTop id=refIndex_2 title=向上跳转 
    href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#ref_[2]" 
    name=refIndex_2></A>
    <P>winpcap调试问题总结及解决方法</P>
    <P class=refUrl><A href="http://technic.xkq.com/20090611/96928.html" 
    target=_blank>http://technic.xkq.com/20090611/96928.html<IMG 
    src="winpcap_百度百科.files/ico_link.gif" 
align=absMiddle></A></P></LI></UL></DD></DL>
<DL id=viewExtRead>
  <DT>扩展阅读： 
  <DD>
  <P>1.<A href="http://www.studentblog.net/m/dijk/archives/2006/17233.html" 
  target=_blank>http://www.studentblog.net/m/dijk/archives/2006/17233.html</A> 
  </P>
  <P>2.<A href="http://www.syue.com/Analyze/HTML/8288.html" 
  target=_blank>http://www.syue.com/Analyze/HTML/8288.html</A> </P>
  <P>3.<A href="http://www.syue.com/Analyze/HTML/8239.html" 
  target=_blank>http://www.syue.com/Analyze/HTML/8239.html</A> </P></DD></DL>
<DL id=viewExtCati>
  <DT>开放分类： 
  <DD><A 
  href="http://baike.baidu.com/taglist?tag=%BB%A5%C1%AA%CD%F8&amp;tagfromview" 
  target=_blank>互联网</A>，<A 
  href="http://baike.baidu.com/taglist?tag=%BC%C6%CB%E3%BB%FA&amp;tagfromview" 
  target=_blank>计算机</A>，<A 
  href="http://baike.baidu.com/taglist?tag=%D0%AD%D2%E9&amp;tagfromview" 
  target=_blank>协议</A>，<A 
  href="http://baike.baidu.com/taglist?tag=%C7%FD%B6%AF&amp;tagfromview" 
  target=_blank>驱动</A>，<A 
  href="http://baike.baidu.com/taglist?tag=%CF%B5%CD%B3&amp;tagfromview" 
  target=_blank>系统</A> </DD></DL></DIV>
<DIV class=ref-highlight>
<DL id=relatedLemmaDown>
  <DT><SPAN class="f12 r">[<A 
  onclick='userlogin.check(lemma.editRelated,false,"editRelated");nslog.stat("popre");return false' 
  href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#">我来完善</A>] 
  </SPAN>“winpcap”相关词条： 
  <DD class=relative><SPAN class=word_more1 id=word_more 
  style="VISIBILITY: hidden" onclick=lemma.showMoreRelated()>更多</SPAN> 
  <DIV id=oneLineDiv style="VISIBILITY: hidden"><SPAN 
  id=oneLineSpan></SPAN></DIV>
  <DIV class=word_more_con id=word_more_con style="DISPLAY: none"><A 
  title=libpcap href="http://baike.baidu.com/view/1319961.htm?func=retitle" 
  target=_blank>libpcap</A> </DIV></DD></DL></DIV>
<DIV class=end><A class=backtop 
href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#"></A><SPAN 
class=declare>百度百科中的词条内容仅供参考，如果您需要解决具体问题<BR>（尤其在法律、医学等领域），建议您咨询相关领域专业人士。</SPAN> 
<DIV class=text_vote1 id=vote_btn><SPAN id=vote_txt>本词条对我有帮助</SPAN><B 
id=vote_num></B></DIV></DIV>
<SCRIPT type=text/javascript>/*<![CDATA[*/(function(){var $=baidu.G("vote_btn");baidu.on($,"mouseover",function(){this.className="text_vote2"});baidu.on($,"mouseout",function(){this.className="text_vote1";baidu.G("vote_txt").innerHTML="\u672c\u8bcd\u6761\u5bf9\u6211\u6709\u5e2e\u52a9"});baidu.on($,"click",function(){baidu.sio.callByBrowser("/view/recommendLemma/lemmaid=696423&random="+Math.random())});$=null})()/*]]>*/</SCRIPT>

<UL class=endLinks>
  <LI class=itieBa><A onclick='nslog(location.href,97,{name:"itieba"})' 
  href="http://tieba.baidu.com/i/sys/share?link=http%3A%2F%2Fbaike.baidu.com%2Fview%2F696423.htm&amp;type=text&amp;title=winpcap_%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91&amp;content=winpcap%28windows%20packet%20capture%29%E6%98%AFwindows%E5%B9%B3%E5%8F%B0%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%EF%BC%8C%E5%85%AC%E5%85%B1%E7%9A%84%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE%E7%B3%BB%E7%BB%9F%E3%80%82%E5%BC%80%E5%8F%91winpcap%E8%BF%99%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%9B%AE%E7%9A%84%E5%9C%A8%E4%BA%8E%E4%B8%BAwin32%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%90%E4%BE%9B%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C%E5%BA%95%E5%B1%82%E7%9A%84%E8%83%BD%E5%8A%9B%E3%80%82" 
  target=_blank>分享到<SPAN class=tieba_i>i</SPAN>贴吧</A> </LI>
  <LI class=cang><A 
  onclick='window.open("http://cang.baidu.com/do/add?it="+encodeURIComponent(document.title)+"&amp;iu="+encodeURIComponent(location.href)+"&amp;tn=%E7%99%BE%E7%A7%91%E8%AF%8D%E6%9D%A1%2C&amp;fr=bk#nw=1","_s","scrollbars=no,width=600,height=450,left=75,top=20,status=no,resizable= yes");nslog(this.href,99,{name:"addToFavorite"});return false' 
  href="http://cang.baidu.com/do/add" target=_blank>添加到搜藏</A> 
  <DIV class=clear></DIV></LI></UL>
<UL class=endLinks-share>
  <LI class=tsina><A 
  href="javascript:void((function(s,d,e,r,l,p,t,z,c){var%20f='http://v.t.sina.com.cn/share/share.php?appkey=3417820038',u=z||d.location,p=['&amp;url=',e(u),'&amp;title=',e(t||d.title),'&amp;source=',e(r),'&amp;sourceUrl=',e(l),'&amp;content=',c||'gb2312','&amp;pic=',e(p||'')].join('');function a(){if(!window.open([f,p].join(''),'mb',['toolbar=0,status=0,resizable=1,width=440,height=430,left=',(s.width-440)/2,',top=',(s.height-430)/2].join('')))u.href=[f,p].join('');};if(/Firefox/.test(navigator.userAgent))setTimeout(a,0);else a();})(screen,document,encodeURIComponent,'BAIDUBAIKE','http://baike.baidu.com','','【winpcap_百度百科】 winpcap(windows packet capture)是windows平台下一个免费，公共的网络访问系统。开发winpcap这个项目......','http://baike.baidu.com/view/696423.htm',''));nslog(location.href,94,{name:'tsina',id:'696423',title:'winpcap'})">分享到新浪微博</A> 
  </LI>
  <LI class=tdouban><A 
  href="javascript:void((function(s,d,e,r,l,p,t,ab,z,c){var%20f='http://www.douban.com/recommend/',u=z||d.location,p=['?&amp;url=',e(u),'&amp;title=',e(t||d.title),'&amp;abstract=',e(ab||'')].join('');function a(){if(!window.open([f,p].join(''),'mb',['toolbar=0,status=0,resizable=1,width=440,height=430,left=',(s.width-440)/2,',top=',(s.height-430)/2].join('')))u.href=[f,p].join('');};if(/Firefox/.test(navigator.userAgent))setTimeout(a,0);else a();})(screen,document,encodeURIComponent,'BAIDUBAIKE','http://baike.baidu.com','','【winpcap_百度百科】','winpcap(windows packet capture)是windows平台下一个免费，公共的网络访问系统。开发winpcap这个项目的目的在于为win32应用程序提供访问网络底层的能力。......','http://baike.baidu.com/view/696423.htm',''));nslog(location.href,257,{name:'tdouban',id:'696423',title:'winpcap'})">分享到豆瓣网</A> 

  <DIV class=clear></DIV></LI></UL>
<DIV class="ref no-border">
<DL class=lemma-ext-bottom>
  <DT>合作编辑者 
  <DD>
  <DIV class=onelineOnly><SPAN id=co-editors><SPAN><A 
  href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=gacktfly#3" 
  target=_blank>gacktfly</A></SPAN> <SPAN>、<A 
  href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=ssr213#3" 
  target=_blank>ssr213</A></SPAN> <SPAN>、<A 
  href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=yexiekai#3" 
  target=_blank>yexiekai</A></SPAN> <SPAN>、<A 
  href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=%D1%E5%B6%E1%B6%E0#3" 
  target=_blank>彦夺多</A></SPAN> <SPAN>、<A 
  href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=yeying0506#3" 
  target=_blank>yeying0506</A></SPAN> <SPAN>、<A 
  href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=chende3472#3" 
  target=_blank>chende3472</A></SPAN> <SPAN>、<A 
  href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=windreiner#3" 
  target=_blank>windreiner</A></SPAN> <SPAN>、 <A 
  href="http://www.baidu.com/search/baike/kedoutuan/index.html" 
  target=_blank><IMG title=百科蝌蚪团 src="winpcap_百度百科.files/tadpole.gif" 
  align=absMiddle></A> <A 
  href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=wenxuan001#3" 
  target=_blank>wenxuan001</A></SPAN> <SPAN>、<A 
  href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=36%B6%C8%C9%C1%B5%E7#3" 
  target=_blank>36度闪电</A></SPAN> <SPAN>、<A 
  href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=go%CE%CF%C5%A3#3" 
  target=_blank>go蜗牛</A></SPAN> </SPAN></DIV><A class="f12 ref_more" 
  id=more-coeditor style="DISPLAY: none" 
  href="http://baike.baidu.com/update/id=696423?from=au" target=_blank>更多</A> 
  <DIV class=clear></DIV>
  <DIV class="try f12">如果您认为本词条还需进一步完善，百科欢迎您也来参与<A class="edit pr12" 
  onclick='editLemmaPara("/edit/","696423");return false' 
  href="http://baike.baidu.com/view/696423.htm?fr=ala0_1#">编辑词条</A>在开始编辑前，您还可以先学习<A 
  href="http://www.baidu.com/search/baike_help.html#n31" 
  target=_blank>如何编辑词条</A></DIV></DD></DL></DIV><BR><BR>
<P><IMG class=pr12 src="winpcap_百度百科.files/ico_bz.gif">如想投诉，请到<A 
href="http://tousu.baidu.com/baike" target=_blank>百度百科投诉中心</A>；如想提出意见、建议，请到<A 
href="http://tieba.baidu.com/f?kw=%B0%D9%B6%C8%B0%D9%BF%C6" 
target=_blank>百度百科吧</A>。 </P></DIV></DIV>
<DIV id=side>
<DIV class=box2 id=lemma-overview>
<DIV class=box2-inner>
<H2>词条统计</H2>
<P class="pad14 info f12">浏览次数：约 <SPAN id=viewPV></SPAN>次<BR>编辑次数：10次 <A 
href="http://baike.baidu.com/update/id=696423" target=_blank>历史版本</A> 
<BR>最近更新：<SPAN id=lastModifyTime>2010-04-20</SPAN><BR>创建者：<A 
href="http://passport.baidu.com/?business&amp;aid=7&amp;default_tab=2&amp;un=go%CE%CF%C5%A3#3" 
target=_blank>go蜗牛</A></P></DIV></DIV>
<DIV class=box2 id=bkDynamic style="DISPLAY: none">
<DIV class=box2-inner>
<H5 id=profileTitle></H5>
<DIV class="pad14 f12">
<DL class=task id=task style="DISPLAY: none"></DL>
<DL class=notice id=notice></DL></DIV></DIV></DIV>
<DIV class=box2 id=mabox style="DISPLAY: none">
<DIV class=box2-inner id=box2-inner>
<SCRIPT type=text/javascript>var arrBaiduAds=new Array();function BaiduAdsDisplay($){if(typeof(arrBaiduAds[$])=="undefined"||arrBaiduAds[$]=="")return;G("mabox").style.display="";nslog.set("maad",1);G("box2-inner").innerHTML=arrBaiduAds[$]}</SCRIPT>

<SCRIPT type=text/javascript>/*<![CDATA[*/baidu.sio.callByBrowser("http://a.baidu.com/ecom?di=216&tm=baiduASPT216S&tn=baidubaike_pg&word=winpcap",function(){BaiduAdsDisplay(216)})/*]]>*/</SCRIPT>
</DIV></DIV>
<DIV class=clear></DIV></DIV>
<DIV class=clear></DIV></DIV><IMG style="DISPLAY: none" src=""><INPUT 
id=titleVal type=hidden value=winpcap>
<SCRIPT type=text/javascript>/*<![CDATA[*/var lemma=lemma||{};lemma.indexHighLight=function(C,A){var B=C.parentNode.getElementsByTagName("a"),$=(C.className.match(/on/)>-1);if($){baidu.each(B,function($){baidu.removeClass($,"on")});baidu.addClass(C,"on")}else baidu.removeClass(C,"on");var _=baidu.Q("index-item",C.parentNode.parentNode,"table");if(_&&_[0])baidu.each(_[0].getElementsByTagName("a"),function(_){if($&&_.rel.toUpperCase()==A)baidu.addClass(_.parentNode,"highlight");else baidu.removeClass(_.parentNode,"highlight")})};lemma.moduleIndexInit=function(_,$){baidu.each($,function($){var A=$.rel||"";A=A.toUpperCase();if(_[A])baidu.addClass(_[A],"enable")});$=null;_=null};lemma.moduleIndexLinkClick=function($){baidu.event.preventDefault($);if(this.className.match(/enable/))lemma.indexHighLight(this,baidu.trim(this.innerHTML).toUpperCase())};baidu.each(baidu.Q("index-box",document,"div"),function(C){var _=baidu.Q("opt-hide",C,"a");if(_&&_[0]){baidu.on(_[0],"click",function(_){baidu.event.preventDefault(_);var $=baidu.Q("bd",this.parentNode.parentNode,"div");if($&&$[0]){baidu.dom.toggle($[0]);if($[0].style.display=="none"){baidu.addClass(this.parentNode,"st-hide");this.innerHTML="\u5c55\u5f00"}else{baidu.removeClass(this.parentNode,"st-hide");this.innerHTML="\u9690\u85cf"}}});baidu.on(_[0],"focus",function(){this.blur()})}var $=baidu.Q("idx",C,"div");if($&&$[0]){var A={},B=C.getElementsByTagName("table");if(B){baidu.each($[0].getElementsByTagName("a"),function($){var _=baidu.trim($.innerHTML);A[_]=$;baidu.on($,"click",lemma.moduleIndexLinkClick);baidu.on($,"focus",function(){this.blur()})});lemma.moduleIndexInit(A,B[0].getElementsByTagName("a"));A=null}}})/*]]>*/</SCRIPT>

<SCRIPT type=text/javascript>/*<![CDATA[*/nslog.set("page","view");nslog.set("lemmaid","696423");baidu.each(document.getElementsByTagName("img"),function(_,$){if(_.className=="editorImg")baidu.on(_,"mousedown",function(){nslog(this.src,8)})});nslog(location.href,11);baidu.each(baidu.G("lemmaContent").getElementsByTagName("a"),function(_,$){if(/\/view\/\d+/.test(_.href))baidu.on(_,"mousedown",function(){nslog(this.href,12)})});baidu.ajax.get("/api/lemmacnt/696423",function(_){var $=baidu.json.parse(_.responseText);if($){baidu.G("viewPV").innerHTML=$.pv;baidu.G("vote_num").innerHTML=$.rec;if($.dynamic)lemma.getDynamicData()}});(function(){var _=location.hash;if(_)setTimeout(function(){window.location.hash=_.slice(1)},1000);var $=baidu.G("lastModifyTime");$.innerHTML=lemma.getDays(baidu.trim($.innerHTML));var A=document.documentElement.clientWidth;if(A>1034)baidu.G("content-wrap").style.width="1034px"})();baidu.on(baidu.G("content-wrap"),"mousedown",autoScroll.stop);baidu.on(baidu.G("content-wrap"),"dblclick",autoScroll.start);lemma.relatedInit();lemma.coEditorInit();baidu.on(window,"load",lemma.contentImageInit);(function(){function $(_,$){if(_)baidu.each(_.getElementsByTagName("a"),function(A,_){baidu.on(A,"mousedown",function(){nslog(this.href,$)})})}$(baidu.G("viewExtRead"),1);$(baidu.G("viewRefer"),2);$(baidu.G("bkDict"),17);$(baidu.G("relatedLemmaDown"),18);$(baidu.G("viewExtCati"),19);$(baidu.G("corpEditorUL"),16)})()/*]]>*/</SCRIPT>
 </DIV>
<DIV id=footer>&copy; 2010 Baidu <A 
href="http://www.baidu.com/search/baike_help.html#n10" target=_blank>权利声明</A> 
</DIV></DIV></BODY></HTML>
